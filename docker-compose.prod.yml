version: "3.8"

services:
  # ===============================
  # REVERSE PROXY
  # ===============================
  nginx:
    image: nginx:alpine
    container_name: analyzer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - analyzer-network
    restart: unless-stopped

  # ===============================
  # DATABASE SERVICES
  # ===============================
  postgres:
    image: postgres:15-alpine
    container_name: analyzer-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analyzer-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: analyzer-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analyzer-network
    restart: unless-stopped

  # ===============================
  # APPLICATION SERVICES
  # ===============================
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: production
    container_name: analyzer-api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DEBUG=False
      - LOG_LEVEL=INFO
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - analyzer-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  worker:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: production
    container_name: analyzer-worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DEBUG=False
      - LOG_LEVEL=INFO
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["python", "packages/api/src/worker.py"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - analyzer-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
    container_name: analyzer-frontend
    expose:
      - "80"
    depends_on:
      - api
    networks:
      - analyzer-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"

  # ===============================
  # MONITORING
  # ===============================
  prometheus:
    image: prom/prometheus:latest
    container_name: analyzer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - analyzer-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: analyzer-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - analyzer-network
    restart: unless-stopped

  # ===============================
  # LOG AGGREGATION
  # ===============================
  loki:
    image: grafana/loki:latest
    container_name: analyzer-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - analyzer-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: analyzer-promtail
    volumes:
      - ./logs:/var/log/app
      - ./docker/promtail/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - analyzer-network
    restart: unless-stopped

# ===============================
# VOLUMES
# ===============================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# ===============================
# NETWORKS
# ===============================
networks:
  analyzer-network:
    driver: bridge
    name: analyzer-network
